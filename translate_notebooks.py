#!/usr/bin/env python3
import json
import re

def translate_text(text):
    """Translate Chinese text to English"""
    translations = {
        # Step 5 specific translations
        "第五步：classification建模": "Step 5: Classification Modeling",
        "本notebook的目标：": "Objectives of this notebook:",
        "loading经过sentiment analysis和Topic建模的data": "Load data processed through sentiment analysis and topic modeling",
        "Preparing特征工程（text向量化和Topic分布特征）": "Prepare feature engineering (text vectorization and topic distribution features)",
        "trainingclassificationmodel（Naive Bayes 和 Random Forest）": "Train classification models (Naive Bayes and Random Forest)",
        "model评估和比较": "Model evaluation and comparison",
        "Generatingmodel评估report": "Generate model evaluation report",
        "classification任务": "Classification Task",
        "目标variable": "Target variable",
        "情感标签（Positive、Neutral、Negative）": "Sentiment labels (Positive, Neutral, Negative)",
        "特征": "Features",
        "TF-IDF向量 + Topic分布": "TF-IDF vectors + Topic distribution",
        "model": "Model",
        "Naive Bayes、Random Forest": "Naive Bayes, Random Forest",
        "评估指标": "Evaluation metrics",
        "accuracy、召回率、F1value、混淆矩阵": "accuracy, recall, F1 score, confusion matrix",
        "model流程": "Model Pipeline",
        "data预processing和特征工程": "Data preprocessing and feature engineering",
        "training/testing集划分": "Train/test set split",
        "modeltraining和调参": "Model training and hyperparameter tuning",
        "model评估和对比": "Model evaluation and comparison",
        "特征important性Analyzing": "Feature importance analysis",
        
        # Import libraries
        "importing必要的库": "Import necessary libraries",
        "setup图表样式": "Set up chart style",
        "库importingcompleting！": "Libraries imported successfully!",
        
        # Spark session
        "initial化Spark Session": "Initialize Spark Session",
        
        # Data loading
        "loadingTopicAnalyzing和sentiment analysis的data": "Load topic analysis and sentiment analysis data",
        "dataloading": "Data Loading",
        "尝试loadingTopicAnalyzingresults": "Attempting to load topic analysis results",
        "TopicAnalyzingdataloadingcompleting": "Topic analysis data loaded successfully",
        "共": "total",
        "records": "records",
        "datastructure": "Data structure",
        "Checking必要的列": "Checking required columns",
        "缺少必要列": "Missing required columns",
        "尝试loading其他data源": "Attempting to load other data sources",
        "备选方案：loadingsentiment analysisdata": "Alternative: load sentiment analysis data",
        "need重新进行情感classification": "Need to re-perform sentiment classification",
        "found情感分数列": "Found sentiment score columns",
        "临时Topic": "Temporary topic",
        "usingsentiment analysisdata": "Using sentiment analysis data",
        "所有必要列都存在": "All required columns exist",
        "dataloadingfailed": "Data loading failed",
        "usingcleaned data作为备选方案": "Using cleaned data as fallback",
        "最后备选：usingcleaned data": "Final fallback: using cleaned data",
        "using原始sentiment列": "Using original sentiment column",
        "using清洗后data": "Using cleaned data",
        
        # Data preprocessing
        "Checking情感标签分布": "Checking sentiment label distribution",
        "情感标签分布": "Sentiment label distribution",
        "converting为pandas查看详细比例": "Convert to pandas to view detailed proportions",
        "详细分布": "Detailed distribution",
        "过滤掉\"Unknown\"标签的data（if存在）": "Filter out \"Unknown\" label data (if exists)",
        "过滤后data量": "Data size after filtering",
        "Checking是否有分词results，if没有则重新分词": "Check if tokenization results exist, if not re-tokenize",
        "重新进行text分词": "Re-perform text tokenization",
        "分词": "Tokenization",
        "去停用词": "Remove stop words",
        "分词completing": "Tokenization completed",
        "已有分词results": "Tokenization results already exist",
        "final用于建模的data": "Final data for modeling",
        
        # Feature construction
        "构建特征向量": "Build feature vectors",
        "text特征：TF-IDF向量化": "Text features: TF-IDF vectorization",
        "构建TF-IDF特征": "Build TF-IDF features",
        "reducing特征维度提Hightraining速度": "Reduce feature dimensions to improve training speed",
        "最小document频率": "Minimum document frequency",
        "TF-IDFVocabulary size": "TF-IDF vocabulary size",
        "Topic特征processing（简化processing避免OneHotEncoderproblem）": "Topic feature processing (simplified to avoid OneHotEncoder issues)",
        "CheckingTopic特征": "Checking topic features",
        "CheckingTopicvalue的唯一性": "Checking uniqueness of topic values",
        "discovery": "Found",
        "个不同的Topicvalue": "different topic values",
        "addingTopic特征": "Adding topic features",
        "先converting为数value索引": "First convert to numerical index",
        "合并TF-IDF和Topic特征": "Merge TF-IDF and topic features",
        "TF-IDF + Topic特征合并completing": "TF-IDF + Topic feature merging completed",
        "Topicvalue太少，跳过Topic特征，仅usingTF-IDF特征": "Too few topic values, skip topic features, use only TF-IDF features",
        "仅usingTF-IDF特征": "Using only TF-IDF features",
        "final特征data": "Final feature data",
        
        # Training data preparation
        "Preparingtrainingdata和标签编码": "Prepare training data and label encoding",
        "Preparingtrainingdata": "Preparing Training Data",
        "df_featuresundefined，usingdf_tfidf作为特征data": "df_features undefined, using df_tfidf as feature data",
        "will情感标签converting为数value索引": "Convert sentiment labels to numerical indices",
        "获取标签映射": "Get label mapping",
        "标签映射": "Label mapping",
        "划分training集和testing集": "Split training and test sets",
        "training集": "Training set",
        "testing集": "Test set",
        "缓存data提High后续training速度": "Cache data to improve subsequent training speed",
        "Checkingtraining集中的标签分布": "Check label distribution in training set",
        "training集标签分布": "Training set label distribution",
        "testing集标签分布": "Test set label distribution",
        
        # Model training
        "trainingNaive Bayesmodel": "Training Naive Bayes Model",
        "training/testingdata未Preparing，请先running上一个cell": "Training/test data not prepared, please run the previous cell first",
        "CreatingNaive Bayesclassification器": "Creating Naive Bayes classifier",
        "starttrainingNaive Bayesmodel": "Start training Naive Bayes model",
        "Naive Bayestrainingcompleting": "Naive Bayes training completed",
        "在testing集上进行prediction": "Perform prediction on test set",
        "在testing集上prediction": "Prediction on test set",
        "评估Naive Bayesmodel": "Evaluate Naive Bayes model",
        "加权精确率": "Weighted precision",
        "加权召回率": "Weighted recall",
        "F1分数": "F1 score",
        "savingNaive Bayesresults": "Saving Naive Bayes results",
        
        "trainingRandom Forestmodel": "Training Random Forest Model",
        "CreatingRandom Forestclassification器": "Creating Random Forest classifier",
        "树的数量，canaccording toneedadjusting": "Number of trees, can be adjusted according to needs",
        "最大深度": "Maximum depth",
        "starttrainingRandom Forestmodel": "Start training Random Forest model",
        "Random Foresttrainingcompleting": "Random Forest training completed",
        "评估Random Forestmodel": "Evaluate Random Forest model",
        "savingRandom Forestresults": "Saving Random Forest results",
        "特征important性Analyzing": "Feature importance analysis",
        "特征important性向量长度": "Feature importance vector length",
        "获取最important的特征（if是text特征）": "Get most important features (if text features)",
        "converting为pandas进行Analyzing": "Convert to pandas for analysis",
        "if特征main是词汇特征，Displaying最important的词汇": "If features are mainly vocabulary features, display most important words",
        "最important的10个词汇特征": "Top 10 most important vocabulary features",
        "特征important性总和": "Sum of feature importance",
        
        # Model comparison
        "model比较和评估report": "Model Comparison and Evaluation Report",
        "model性能比较": "Model performance comparison",
        "可视化model比较": "Visualize model comparison",
        "比较": "Comparison",
        "在柱状图上adding数value标签": "Add numerical labels on bar chart",
        "determining最佳model": "Determine best model",
        "最佳model": "Best model",
        
        # Detailed classification report
        "详细的classificationreport和混淆矩阵": "Detailed Classification Report and Confusion Matrix",
        "详细classificationreport": "Detailed Classification Report",
        "Generating混淆矩阵data": "Generate confusion matrix data",
        "收集predictionresults": "Collect prediction results",
        "为最佳modelGenerating详细report": "Generate detailed report for best model",
        "converting数value标签回文字标签": "Convert numerical labels back to text labels",
        "Generatingclassificationreport": "Generate classification report",
        "classificationreport": "Classification report",
        "混淆矩阵": "Confusion matrix",
        "可视化混淆矩阵": "Visualize confusion matrix",
        "prediction标签": "Predicted labels",
        "真实标签": "True labels",
        "按class别Analyzing性能": "Analyze performance by class",
        "各class别性能Analyzing": "Performance analysis by class",
        "精确率": "Precision",
        "召回率": "Recall",
        "支持样本数": "Support sample count",
        
        # Save results
        "savingmodel评估results": "Save Model Evaluation Results",
        "Creating完整的评估report": "Create complete evaluation report",
        "saving评估report": "Save evaluation report",
        "model评估report已saving到": "Model evaluation report saved to",
        "saving最佳model的predictionresults（样本）": "Save best model prediction results (samples)",
        "样本predictionresults已saving到": "Sample prediction results saved to",
        "Generatingfinalsummary": "Generate final summary",
        "classification建模summary": "Classification modeling summary",
        "experimentcompleting概况": "Experiment completion overview",
        "data集大小": "Dataset size",
        "特征维度": "Feature dimensions",
        "class别数量": "Number of classes",
        "model性能对比": "Model performance comparison",
        "最佳model": "Best model",
        "resultsAnalyzing": "Results analysis",
        "model性能良好，can较好地区分情感class别": "Model performance is good, can distinguish sentiment classes well",
        "model性能中等，有improving空间": "Model performance is moderate, room for improvement",
        "model性能较Low，建议adjusting特征或算法": "Model performance is low, suggest adjusting features or algorithms",
        "improving建议": "Improvement suggestions",
        "can尝试更多的特征工程（如N-gram、词向量等）": "Can try more feature engineering (such as N-gram, word vectors, etc.)",
        "adjustingmodel超parameters进行optimizing": "Adjust model hyperparameters for optimization",
        "考虑集成学习method": "Consider ensemble learning methods",
        "increasing更多的预processing步骤": "Add more preprocessing steps",
        "classification建模experimentcompleting！": "Classification modeling experiment completed!",
        
        # General terms that weren't caught
        "共": "total",
        "条": "",
        "个": "",
        "Loading": "Loading",
        "loading": "loading",
        "data": "data",
        "completing": "completed",
        "completing！": "completed!",
        "failed": "failed",
        "尝试": "Attempting",
        "Checking": "Checking",
        "Found": "Found",
        "未Found": "Not found",
        "需要": "need",
        "重新": "re-",
        "进行": "perform",
        "using": "using",
        "作为": "as",
        "备选": "alternative",
        "方案": "solution",
        "最后": "final",
        "临时": "temporary",
        "存在": "exist",
        "所有": "all",
        "必要": "required",
        "列": "columns",
        "都": "all",
        "详细": "detailed",
        "分布": "distribution",
        "过滤": "filter",
        "掉": "",
        "后": "after",
        "量": "size",
        "如果": "if",
        "没有": "not",
        "则": "then",
        "已有": "already have",
        "results": "results",
        "用于": "for",
        "建模": "modeling",
        "构建": "build",
        "特征": "feature",
        "向量": "vector",
        "text": "text",
        "向量化": "vectorization",
        "reducing": "reduce",
        "维度": "dimensions",
        "提High": "improve",
        "training": "training",
        "速度": "speed",
        "最小": "minimum",
        "document": "document",
        "频率": "frequency",
        "size": "size",
        "processing": "processing",
        "简化": "simplified",
        "避免": "avoid",
        "problem": "problem",
        "value": "value",
        "唯一性": "uniqueness",
        "不同": "different",
        "adding": "adding",
        "先": "first",
        "converting": "convert",
        "为": "to",
        "数value": "numerical",
        "索引": "index",
        "合并": "merge",
        "太少": "too few",
        "跳过": "skip",
        "仅": "only",
        "final": "final",
        "Preparing": "Preparing",
        "标签": "label",
        "编码": "encoding",
        "undefined": "undefined",
        "will": "will",
        "获取": "get",
        "映射": "mapping",
        "划分": "split",
        "集": "set",
        "缓存": "cache",
        "后续": "subsequent",
        "中": "in",
        "Creating": "Creating",
        "classification器": "classifier",
        "start": "start",
        "在": "on",
        "上": "",
        "prediction": "prediction",
        "评估": "evaluate",
        "加权": "weighted",
        "精确率": "precision",
        "召回率": "recall",
        "分数": "score",
        "saving": "saving",
        "数量": "number",
        "can": "can",
        "according to": "according to",
        "need": "need",
        "adjusting": "adjust",
        "最大": "maximum",
        "深度": "depth",
        "important性": "importance",
        "长度": "length",
        "最": "most",
        "main": "mainly",
        "是": "are",
        "词汇": "vocabulary",
        "Displaying": "display",
        "总和": "sum",
        "性能": "performance",
        "比较": "comparison",
        "可视化": "visualize",
        "柱状图": "bar chart",
        "numerical": "numerical",
        "determining": "determine",
        "佳": "best",
        "classificationreport": "classification report",
        "混淆": "confusion",
        "矩阵": "matrix",
        "Generating": "Generate",
        "收集": "collect",
        "为": "for",
        "model": "model",
        "converting": "convert",
        "回": "back to",
        "文字": "text",
        "真实": "true",
        "按": "by",
        "class别": "class",
        "Analyzing": "analyze",
        "各": "each",
        "支持": "support",
        "样本": "sample",
        "数": "count",
        "Creating": "create",
        "完整": "complete",
        "已": "already",
        "到": "to",
        "samples": "samples",
        "finalsummary": "final summary",
        "概况": "overview",
        "集": "set",
        "大小": "size",
        "对比": "comparison",
        "良好": "good",
        "较好": "well",
        "地": "",
        "区分": "distinguish",
        "中等": "moderate",
        "有": "have",
        "空间": "room",
        "较Low": "relatively low",
        "建议": "suggest",
        "或": "or",
        "算法": "algorithms",
        "尝试": "try",
        "更多": "more",
        "工程": "engineering",
        "如": "such as",
        "词向量": "word vectors",
        "等": "etc",
        "超parameters": "hyperparameters",
        "optimizing": "optimization",
        "考虑": "consider",
        "集成": "ensemble",
        "学习": "learning",
        "method": "methods",
        "increasing": "add",
        "预processing": "preprocessing",
        "步骤": "steps",
        "experiment": "experiment",
        
        # Additional mixed text patterns
        "和sentiment analysisresults": "and sentiment analysis results",
        "cleaned data和sentiment analysis": "cleaned data and sentiment analysis",
        "sentiment analysisData Loading": "sentiment analysis data loading",
        "tokens_cleanedcolumnsare否exist": "whether tokens_cleaned column exists", 
        "Not found tokens_cleaned column": "tokens_cleaned column not found",
        "tryloadingcleaned data": "try loading cleaned data",
        "清洗afterData Loading": "cleaned data loading",
        "datapreprocessing": "data preprocessing",
        "filter和PreparingTopicmodeling": "filter and prepare topic modeling",
        "improveTopic质size": "improve topic quality",
        "Data size after filtering": "Data size after filtering",
        "createfilter件": "create filter condition",
        "占filterafterdata": "percentage of filtered data",
        "cacheFinal data for modeling": "cache final data for modeling",
        "finalforTopicmodeling的data": "final data for topic modeling",
        "采样data以reduce内存压力": "sample data to reduce memory pressure",
        "reduceCalculating负担": "reduce computational burden",
        "using30%的dataperformTopicmodeling": "use 30% of data for topic modeling",
        "采样afterdatasize": "data size after sampling",
        "原data的": "of original data",
        "setup更小的Vocabulary size和更High的minimum词频": "set smaller vocabulary size and higher minimum word frequency",
        "avoid内存problem": "avoid memory issues",
        "improveMinimum document frequency": "improve minimum document frequency",
        "displayvocabulary表in的一些示例vocabulary": "display some example words in vocabulary",
        "updateclimate_countfor采样after的number": "update climate_count to post-sampling count",
        "reduceTopicnumber以适应较小的dataset": "reduce number of topics to fit smaller dataset",
        "reduceTopicnumber": "reduce number of topics",
        "createLDAmodel": "create LDA model",
        "reduce迭代次count以加快training": "reduce iteration count to speed up training",
        "starttrainingLDAmodel": "start training LDA model",
        "LDAmodeltrainingcompleted": "LDA model training completed",
        "model困惑度": "model perplexity",
        "model对count似然": "model log likelihood",
        "get每topics的key词": "get keywords for each topic",
        "display每topics的key词": "display keywords for each topic",
        "GenerateTopicdescription": "generate topic description",
        "based on keywords": "based on keywords"
    }
    
    # Apply translations - sort by length descending to avoid partial matches
    sorted_translations = sorted(translations.items(), key=lambda x: len(x[0]), reverse=True)
    
    for chinese, english in sorted_translations:
        text = text.replace(chinese, english)
    
    return text

def process_notebook(notebook_path):
    """Process a single notebook to translate Chinese text"""
    print(f"Processing {notebook_path}...")
    
    with open(notebook_path, 'r', encoding='utf-8') as f:
        notebook = json.load(f)
    
    # Process each cell
    for cell in notebook['cells']:
        if 'source' in cell:
            # Translate cell source
            for i, line in enumerate(cell['source']):
                cell['source'][i] = translate_text(line)
    
    # Save the translated notebook
    with open(notebook_path, 'w', encoding='utf-8') as f:
        json.dump(notebook, f, ensure_ascii=False, indent=2)
    
    print(f"Completed {notebook_path}")

if __name__ == "__main__":
    notebooks = [
        "notebooks/4_topic_modeling_lda.ipynb", 
        "notebooks/5_classification_modeling.ipynb"
    ]
    
    for notebook in notebooks:
        try:
            process_notebook(notebook)
        except Exception as e:
            print(f"Error processing {notebook}: {e}")
    
    print("All notebooks processed!") 